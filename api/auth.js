// api/auth.js
const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

module.exports = async (req, res) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { password } = req.body;

    if (!password) {
      return res.status(400).json({ error: 'Password required' });
    }

    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ API');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('admins')
      .select('password_hash')
      .eq('username', 'admin')
      .single();

    if (error || !data) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
      return res.status(200).json({ valid: false });
    }

    // –•–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const crypto = require('crypto');
    const inputHash = crypto.createHash('sha256').update(password).digest('hex');
    
    console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π:');
    console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ö–µ—à:', inputHash);
    console.log('–•–µ—à –∏–∑ –±–∞–∑—ã:', data.password_hash);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', inputHash === data.password_hash);

    res.status(200).json({ 
      valid: inputHash === data.password_hash 
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};