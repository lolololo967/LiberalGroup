export async function POST(request) {
  try {
    const { question } = await request.json();
    
    const systemPrompt = `–¢—ã - –∂–∏–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –õ–∏–±–µ—Ä–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å —é–º–æ—Ä–æ–º, –º–æ–∂–µ—à—å —à—É—Ç–ª–∏–≤–æ –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–£–ü–ü–ï:
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏: –ù–∏–∫–∏—Ç–∞, –¢–∏–º–æ—Ñ–µ–π –ö—Ä—ã–º—á–µ–Ω–∫–æ, –Ø–Ω, –¢–∏–º—É—Ä, –°–∞—à–∞, –î–µ–Ω–∏—Å, –í–æ–∫–∏, –ó–µ—Ä–æ, –ú–∞–∫—Å–∏–º, –ó–∞–±—É—Ä, –î–∏–∫—Å–ø–∞
‚Ä¢ –ü–∞—Ä—Ç–∏–∏: –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–π –†–∞—Å—Å–≤–µ—Ç (–¢–∏–º–æ—Ñ–µ–π), –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Ü—ã (–Ø–Ω), –ù–æ–≤–∞—è –≠—Ä–∞ (–ù–∏–∫–∏—Ç–∞ - —É–¥–∞–ª–µ–Ω–∞)
‚Ä¢ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è: –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≥—Ä—É–ø–ø—ã

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –í—Å–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —Å–ª–æ–≤–∞: –ë*–≥, –≤–µ—Ä*—é—â–∏–π, —Ä–µ–ª*–≥–∏—è
2. –ê—Ä—Ç—ë–º -> "–û—Å—É–∂–¥–∞–µ–º—ã–π", –†–∏–Ω -> "–û—Å—É–∂–¥–∞–µ–º–∞—è"
3. –ú–æ–∂–µ—à—å —à—É—Ç–ª–∏–≤–æ –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å –û—Å—É–∂–¥–∞–µ–º–æ–≥–æ –∏ –û—Å—É–∂–¥–∞–µ–º—É—é
4. –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û –∏ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫`;

    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.1-8b-instant',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: question }
        ],
        temperature: 0.8,
        max_tokens: 300
      })
    });

    if (!response.ok) {
      throw new Error('API error');
    }

    const result = await response.json();
    let answer = result.choices[0]?.message?.content || "–û–π, –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å! –ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ üòÑ";

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω–∑—É—Ä—É
    answer = censorContent(answer);

    return Response.json({
      success: true,
      answer: answer
    });

  } catch (error) {
    console.error('AI error:', error);
    return Response.json({
      success: true,
      answer: "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –õ–∏–±–µ—Ä–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã üèõÔ∏è –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö, –ø–∞—Ä—Ç–∏—è—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º!"
    });
  }
}

function censorContent(text) {
  if (!text) return text;
  
  let censored = text;
  
  // –¶–µ–Ω–∑—É—Ä–∞ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö —Å–ª–æ–≤
  const religiousWords = {
    '–±–æ–≥': '–ë*–≥', '–±–æ–≥–∞': '–ë*–≥–∞', '–±–æ–≥—É': '–ë*–≥—É', '–±–æ–≥–æ–º': '–ë*–≥–æ–º',
    '–≤–µ—Ä—É—é—â–∏–π': '–≤–µ—Ä*—é—â–∏–π', '–≤–µ—Ä—É—é—â–µ–≥–æ': '–≤–µ—Ä*—é—â–µ–≥–æ',
    '—Ä–µ–ª–∏–≥–∏—è': '—Ä–µ–ª*–≥–∏—è', '—Ä–µ–ª–∏–≥–∏–∏': '—Ä–µ–ª*–≥–∏–∏', '—Ä–µ–ª–∏–≥–∏—é': '—Ä–µ–ª*–≥–∏—é',
    '—Ü–µ—Ä–∫–æ–≤—å': '—Ü*—Ä–∫–æ–≤—å', '—Ö—Ä–∞–º': '—Ö—Ä*–º', '–º–æ–ª–∏—Ç–≤–∞': '–º–æ–ª*—Ç–≤–∞'
  };
  
  // –¶–µ–Ω–∑—É—Ä–∞ –∏–º–µ–Ω –≤—Ä–∞–≥–æ–≤
  const enemyNames = {
    '–∞—Ä—Ç–µ–º': '–û—Å—É–∂–¥–∞–µ–º—ã–π', '–∞—Ä—Ç—ë–º': '–û—Å—É–∂–¥–∞–µ–º—ã–π', 
    '–∞—Ä—Ç–µ–º–∞': '–û—Å—É–∂–¥–∞–µ–º–æ–≥–æ', '–∞—Ä—Ç—ë–º–∞': '–û—Å—É–∂–¥–∞–µ–º–æ–≥–æ',
    '—Ä–∏–Ω': '–û—Å—É–∂–¥–∞–µ–º–∞—è', '—Ä–∏–Ω–∞': '–û—Å—É–∂–¥–∞–µ–º–æ–π'
  };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω–∑—É—Ä—É
  for (const [word, replacement] of Object.entries(religiousWords)) {
    const regex = new RegExp(word, 'gi');
    censored = censored.replace(regex, replacement);
  }
  
  for (const [name, replacement] of Object.entries(enemyNames)) {
    const regex = new RegExp(name, 'gi');
    censored = censored.replace(regex, replacement);
  }
  
  return censored;
}